//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: logger.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `NosyLogger_LoggerClient`, then call methods of this protocol to make API calls.
internal protocol NosyLogger_LoggerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol? { get }

  func handshake(
    _ request: NosyLogger_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<NosyLogger_Empty, NosyLogger_PublicKey>

  func log(
    _ request: NosyLogger_Logs,
    callOptions: CallOptions?
  ) -> UnaryCall<NosyLogger_Logs, NosyLogger_Empty>
}

extension NosyLogger_LoggerClientProtocol {
  internal var serviceName: String {
    return "nosy_logger.Logger"
  }

  /// Unary call to handshake
  ///
  /// - Parameters:
  ///   - request: Request to send to handshake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func handshake(
    _ request: NosyLogger_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<NosyLogger_Empty, NosyLogger_PublicKey> {
    return self.makeUnaryCall(
      path: NosyLogger_LoggerClientMetadata.Methods.handshake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makehandshakeInterceptors() ?? []
    )
  }

  /// Unary call to log
  ///
  /// - Parameters:
  ///   - request: Request to send to log.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func log(
    _ request: NosyLogger_Logs,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<NosyLogger_Logs, NosyLogger_Empty> {
    return self.makeUnaryCall(
      path: NosyLogger_LoggerClientMetadata.Methods.log.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelogInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension NosyLogger_LoggerClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "NosyLogger_LoggerNIOClient")
internal final class NosyLogger_LoggerClient: NosyLogger_LoggerClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the nosy_logger.Logger service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct NosyLogger_LoggerNIOClient: NosyLogger_LoggerClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol?

  /// Creates a client for the nosy_logger.Logger service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol NosyLogger_LoggerAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol? { get }

  func makeHandshakeCall(
    _ request: NosyLogger_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<NosyLogger_Empty, NosyLogger_PublicKey>

  func makeLogCall(
    _ request: NosyLogger_Logs,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<NosyLogger_Logs, NosyLogger_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension NosyLogger_LoggerAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return NosyLogger_LoggerClientMetadata.serviceDescriptor
  }

  internal var interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeHandshakeCall(
    _ request: NosyLogger_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<NosyLogger_Empty, NosyLogger_PublicKey> {
    return self.makeAsyncUnaryCall(
      path: NosyLogger_LoggerClientMetadata.Methods.handshake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makehandshakeInterceptors() ?? []
    )
  }

  internal func makeLogCall(
    _ request: NosyLogger_Logs,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<NosyLogger_Logs, NosyLogger_Empty> {
    return self.makeAsyncUnaryCall(
      path: NosyLogger_LoggerClientMetadata.Methods.log.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelogInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension NosyLogger_LoggerAsyncClientProtocol {
  internal func handshake(
    _ request: NosyLogger_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> NosyLogger_PublicKey {
    return try await self.performAsyncUnaryCall(
      path: NosyLogger_LoggerClientMetadata.Methods.handshake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makehandshakeInterceptors() ?? []
    )
  }

  internal func log(
    _ request: NosyLogger_Logs,
    callOptions: CallOptions? = nil
  ) async throws -> NosyLogger_Empty {
    return try await self.performAsyncUnaryCall(
      path: NosyLogger_LoggerClientMetadata.Methods.log.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makelogInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct NosyLogger_LoggerAsyncClient: NosyLogger_LoggerAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NosyLogger_LoggerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol NosyLogger_LoggerClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'handshake'.
  func makehandshakeInterceptors() -> [ClientInterceptor<NosyLogger_Empty, NosyLogger_PublicKey>]

  /// - Returns: Interceptors to use when invoking 'log'.
  func makelogInterceptors() -> [ClientInterceptor<NosyLogger_Logs, NosyLogger_Empty>]
}

internal enum NosyLogger_LoggerClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Logger",
    fullName: "nosy_logger.Logger",
    methods: [
      NosyLogger_LoggerClientMetadata.Methods.handshake,
      NosyLogger_LoggerClientMetadata.Methods.log,
    ]
  )

  internal enum Methods {
    internal static let handshake = GRPCMethodDescriptor(
      name: "handshake",
      path: "/nosy_logger.Logger/handshake",
      type: GRPCCallType.unary
    )

    internal static let log = GRPCMethodDescriptor(
      name: "log",
      path: "/nosy_logger.Logger/log",
      type: GRPCCallType.unary
    )
  }
}

